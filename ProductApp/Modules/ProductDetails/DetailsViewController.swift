//
//  DetailsViewController.swift
//  ProductApp
//
//  Created by Ерасыл Еркин on 04.06.2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit
import CoreData

protocol DetailsDelegate: AnyObject {
    func getDetails()
}

protocol DetailsDisplayLogic: AnyObject {
    
}

final class DetailsViewController: UIViewController {
    
    // MARK: - Deps
    var interactor: DetailsBusinessLogic?
    var router: (NSObjectProtocol & DetailsRoutingLogic & DetailsDataPassing)?
    weak var delegate: DetailsDelegate?
    private var productData: Product.ViewModel
    
    init(productData: Product.ViewModel) {
        self.productData = productData
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - UI
    private lazy var productImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: productData.productImage)
        imageView.contentMode = .scaleAspectFit
        imageView.backgroundColor = .white
        return imageView
    }()
    
    private lazy var productTitleLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 16)
        label.textColor = .black
        label.numberOfLines = 0
        label.text = productData.productTitle
        return label
    }()
    
    private lazy var addToFavoritesButton: UIButton = {
        let button = UIButton(type: .system)
        button.tintColor = .red
        button.setImage(UIImage(systemName: "heart"), for: .normal)
        button.addTarget(self, action: #selector(addToFavoritesButtonTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var productAmount: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 18, weight: .medium)
        label.textColor = .black
        label.text = productData.productAmount
        return label
    }()
    
    private lazy var buyProductButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Купить", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = .systemGreen
        button.tintColor = .white
        button.addTarget(self, action: #selector(buyProductButtonTapped), for: .touchUpInside)
        return button
    }()
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigation()
        setupViews()
        setupConstraints()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        updateFavoriteButtonState()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        buyProductButton.layer.cornerRadius = buyProductButton.bounds.height/2
    }
    
    // MARK: - Setup Views
    private func setupViews() {
        DetailsConfigurator.shared.configure(viewController: self)
        view.backgroundColor = .systemGray6
        [productImageView, productTitleLabel, productAmount, addToFavoritesButton, buyProductButton].forEach {
            view.addSubview($0)
        }
    }
    
    private func setupConstraints() {
        productImageView.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(16)
            make.leading.trailing.equalToSuperview()
            make.height.equalTo(400)
        }
        
        productTitleLabel.snp.makeConstraints { make in
            make.top.equalTo(productImageView.snp.bottom).offset(16)
            make.leading.equalToSuperview().offset(16)
            make.trailing.equalTo(addToFavoritesButton.snp.leading).offset(-24)
        }
        
        addToFavoritesButton.snp.makeConstraints { make in
            make.top.equalTo(productImageView.snp.bottom).offset(16)
            make.trailing.equalToSuperview().offset(-16)
            make.height.equalTo(30)
        }
        
        productAmount.snp.makeConstraints { make in
            make.top.equalTo(productTitleLabel.snp.bottom).offset(8)
            make.leading.trailing.equalToSuperview().inset(16)
        }
        
        buyProductButton.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview().inset(24)
            make.height.equalTo(48)
            make.bottom.equalTo(view.safeAreaLayoutGuide.snp.bottom).offset(-8)
        }
    }
    
    private func setupNavigation() {
        navigationItem.title = "Детали"
        navigationItem.largeTitleDisplayMode = .never
    }
    
    // MARK: - Actions
    @objc private func addToFavoritesButtonTapped() {
        productData.isAdded.toggle()
        updateFavoriteButtonState()
        saveChangesToCoreData()
    }
    
    @objc private func buyProductButtonTapped() {
        router?.presentBuyProduct(with: productData)
    }
    
    private func updateFavoriteButtonState() {
        let imageName = productData.isAdded ? "heart.fill" : "heart"
        addToFavoritesButton.setImage(UIImage(systemName: imageName), for: .normal)
    }
    
    private func saveChangesToCoreData() {
        let context = (UIApplication.shared.delegate as? AppDelegate)?.persistentContainer.viewContext
        guard let context else { return }
        let fetchRequest: NSFetchRequest<ProductData> = ProductData.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "productTitle == %@", productData.productTitle)
        
        do {
            let results = try context.fetch(fetchRequest)
            if let productData = results.first {
                productData.isAdded = self.productData.isAdded
                try context.save()
            }
        } catch {
            print("Failed to fetch or save context: \(error)")
        }
    }
}

extension DetailsViewController: BuyProductDelegate {
    func presentSuccessPage(success: Bool) {
        router?.showSuccessScreen(success: success)
    }
}

extension DetailsViewController: DetailsDisplayLogic {
    
}
